import os
import sqlite3
from aiogram import types

import catalog
import config
import corsina
from data import db
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.Inline import Inline_keyboard
import logging

logging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


class SetAmount(StatesGroup):
    new_amount = State()

def get_articul_data(articul):
    conn = sqlite3.connect('data/bot_product.db')
    cursor = conn.cursor()
    cursor.execute('SELECT articul, name_product, variant,price, photo_path, all_amount FROM product WHERE articul = ?', (articul,))
    articul_data = cursor.fetchone()
    conn.commit()
    conn.close()
    return articul_data if articul_data else None




async def start_articul(bot, chat_id, articul_numb):
    # db.database.delete_user(chat_id)
    global caption

    global photo_message_id
    global articul_data
    try:

        articul_data = get_articul_data(articul_numb)

        # start_articul = (await bot.send_message(chat_id, f"–í—ã –≤–≤–µ–ª–∏ –∞—Ä—Ç–∏–∫—É–ª: {articul_numb}")).message_id
        if articul_data:
            print(articul_data)
            if articul_data[5] > 0:
                caption = f"*{articul_data[1]}*\n*–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞*: {articul_data[2]}\n*–¶–µ–Ω–∞*: {articul_data[3]}\n–ö–æ–ª-–≤–æ: 1\n–û—Å—Ç–∞–ª–æ—Å—å: {articul_data[5]}"
                if chat_id == config.ID_ADMIN:
                    from keyboards.Inline.Inline_keyboard import product_show_articul_for_admin
                    photo_message_id = (await bot.send_photo(chat_id, photo = InputFile(articul_data[4]), caption = caption, parse_mode = "Markdown", reply_markup = product_show_articul_for_admin)).message_id

                else:
                    caption = f"*{articul_data[1]}*\n*–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞*: {articul_data[2]}\n*–¶–µ–Ω–∞*: {articul_data[3]}\n–ö–æ–ª-–≤–æ: 1\n–û—Å—Ç–∞–ª–æ—Å—å: {articul_data[5]}"
                    from keyboards.Inline.Inline_keyboard import product_show_articul
                    photo_message_id = (await bot.send_photo(chat_id,photo = InputFile(articul_data[4]),caption = caption,parse_mode = "Markdown",
                                             reply_markup = product_show_articul)).message_id
                print(articul_data)
                global amount_to_buy

                amount_to_buy = 1
            else:
                caption = f"*{articul_data[1]}*\n*–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞*: {articul_data[2]}\n*–¶–µ–Ω–∞*: {articul_data[3]}\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—èüò¢"
                if chat_id == config.ID_ADMIN:
                    from keyboards.Inline.Inline_keyboard import product_show_articul_nol_for_admin
                    photo_message_id = (await bot.send_photo(chat_id,photo = InputFile(articul_data[4]),caption = caption,
                                                             parse_mode = "Markdown",
                                                             reply_markup = product_show_articul_nol_for_admin)).message_id

                else:
                    from keyboards.Inline.Inline_keyboard import product_show_articul_nol
                    await bot.send_photo(chat_id,photo = InputFile(articul_data[4]),caption = caption,
                                                             parse_mode = "Markdown",
                                                             reply_markup = product_show_articul_nol)
                print(articul_data)
                amount_to_buy = 1
                print(amount_to_buy)
        else:
            await bot.delete_message(chat_id, start_articul)
            await catalog.ArticulForm.articul_numb.set()
            await bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ!!\n"
                                            "–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º –∑–∞ –ø–æ–º–æ—â—å—é (–≤ –∫–æ–º–∞–Ω–¥–µ üÜò –ü–æ–º–æ—â—å –∏–ª–∏ /help)\n\n"
                                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ start_articul: {e}",exc_info = True)


async def set_amount_art(bot, message: types.Message, state: FSMContext):
    global articul_data
    user_id = message.from_user.id
    new_amount = message.text.strip()

    if not new_amount.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    await bot.send_message(user_id, f"–í—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª-–≤–æ {new_amount}")
    db.database.update_all_amount(articul_data[0], new_amount)
    await bot.send_message(user_id, f"–ö–æ–ª-–≤–æ –¥–ª—è {articul_data[0]} –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_amount}")
    await state.finish()

async def process_callback(bot, callback_query, state):
    global amount_to_buy
    # global photo_message_id
    global articul_data
    global caption

    if callback_query.data == 'amount_sum_1':
        max_amount = db.database.get_all_amount(articul_data[0])[0]
        # print(all_amount[0])
        if amount_to_buy < max_amount:
            amount_to_buy += 1
            print(amount_to_buy)
    elif callback_query.data == 'amount_min_1':
        if amount_to_buy > 1:
            amount_to_buy -= 1
            print(amount_to_buy)
    elif callback_query.data == 'set_amount':
        await SetAmount.new_amount.set()
        await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: ")

    elif callback_query.data == 'choose_enter_1':
        new_amount_1 = db.database.get_all_amount(articul_data[0])
        if new_amount_1[0] > 0:
            category = articul_data[4].split('_')[2]
            await corsina.add_to_cart(callback_query.message.chat.id,articul_data[1],articul_data[0],articul_data[2],amount_to_buy,articul_data[3],category)
            await db.database.add_product(articul_data[0],articul_data[1],articul_data[2],articul_data[3],articul_data[4])
            await bot.send_message(callback_query.message.chat.id,
                                   f"–¢–æ–≤–∞—Ä {articul_data[1]}:\n\n–ê—Ä—Ç–∏–∫—É–ª: {articul_data[0]}\n–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {articul_data[2]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount_to_buy}\n–¶–µ–Ω–∞: {articul_data[3] * amount_to_buy}\n\n–ë—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É üíµ‚Äç",
                                   reply_markup = Inline_keyboard.show_basket_add)


            new_amount = new_amount_1[0] - amount_to_buy
            db.database.update_all_amount(articul_data[0],new_amount)
            caption = f"*{articul_data[1]}*\n*–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞*: {articul_data[2]}\n*–¶–µ–Ω–∞*: {articul_data[3]}\n–ö–æ–ª-–≤–æ: {amount_to_buy}\n–û—Å—Ç–∞–ª–æ—Å—å: {articul_data[5]}"
        else:
            await bot.send_message(callback_query.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è üò¢")


    # caption = f"*{articul_data[1]}*\n*–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞*: {articul_data[2]}\n*–¶–µ–Ω–∞*: {articul_data[3]}\n–ö–æ–ª-–≤–æ: {amount_to_buy}\n–û—Å—Ç–∞–ª–æ—Å—å: {articul_data[5]}"
    all_amount_prod = db.database.get_all_amount(articul_data[0])
    if callback_query.message.chat.id == config.ID_ADMIN:
        if all_amount_prod[0] > 0:
            caption_text = f"*{articul_data[1]}*\n*–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞*: {articul_data[2]}\n*–¶–µ–Ω–∞*: {articul_data[3]}\n–ö–æ–ª-–≤–æ: {amount_to_buy}\n–û—Å—Ç–∞–ª–æ—Å—å: {articul_data[5]}"
            await bot.edit_message_caption(
                chat_id = callback_query.message.chat.id,
                message_id = callback_query.message.message_id,
                caption = caption_text,
                reply_markup = Inline_keyboard.product_show_articul_for_admin,
                parse_mode = 'Markdown')
        else:
            caption_text = f"*{articul_data[1]}*\n*–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞*: {articul_data[2]}\n*–¶–µ–Ω–∞*: {articul_data[3]}\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—èüò¢"
            await bot.edit_message_caption(
                chat_id = callback_query.message.chat.id,
                message_id = callback_query.message.message_id,
                caption = caption_text,
                reply_markup = Inline_keyboard.product_show_articul_nol_for_admin,
                parse_mode = 'Markdown')
    else:
        if all_amount_prod[0] > 0:
            caption_text = f"*{articul_data[1]}*\n*–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞*: {articul_data[2]}\n*–¶–µ–Ω–∞*: {articul_data[3]}\n–ö–æ–ª-–≤–æ: {amount_to_buy}\n–û—Å—Ç–∞–ª–æ—Å—å: {articul_data[5]}"
            await bot.edit_message_caption(
                chat_id = callback_query.message.chat.id,
                message_id = callback_query.message.message_id,
                caption = caption_text,
                reply_markup = Inline_keyboard.product_show_articul,
                parse_mode = 'Markdown')
        else:
            caption_text = f"*{articul_data[1]}*\n*–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞*: {articul_data[2]}\n*–¶–µ–Ω–∞*: {articul_data[3]}\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—èüò¢"
            await bot.edit_message_caption(
                chat_id = callback_query.message.chat.id,
                message_id = callback_query.message.message_id,
                caption = caption_text,
                reply_markup = Inline_keyboard.product_show_articul_nol,
                parse_mode = 'Markdown')