import sqlite3
import more_category
import profil_register
from data.db import database
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import config
import corsina
from catalog import handle_catalog_button, show_category_products  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
import photo_handler
import photo_hendler_two
from aiogram.types import ContentTypes
from keyboards.Markup import Markup_keyboards
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from keyboards.Inline import Inline_keyboard


class PaymentState(StatesGroup):
    ASK_NAME = State()
    ASK_REGION = State()
    ASK_CITY = State()
    ASK_STREET = State()
    ASK_HOUSE = State()
    ASK_INDECS = State()
    CONFIRMATION = State()


storage = MemoryStorage()
bot = Bot(token = config.BOT_TOKEN)
dp = Dispatcher(bot, storage = storage)


@dp.message_handler(commands = ['start'])
async def send_welcome(message: types.Message):
    welcome_message = \
        f"*üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}!*\n\n" \
        f"–Ø - *—Ç–≤–æ–π –ª–∏—á–Ω—ã–π —à–æ–ø–∏–Ω–≥-–±–æ—Ç* üõçÔ∏è.\n–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n\n" \
        f"- ‚úíÔ∏è *–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±–ª–æ–∂–∫–∏*\n" \
        f"- üìò *–°—Ç–∏–ª—å–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∏*\n" \
        f"- üåü *–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ*\n\n" \
        f"*–°–æ–∑–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è it's my planner | by A-STUDENT!*"
    await bot.send_message(message.chat.id, welcome_message, reply_markup = Markup_keyboards.main_menu,
                           parse_mode = 'Markdown')


@dp.message_handler(lambda message: message.text in ['üÜò –ü–æ–º–æ—â—å', '/help'])
async def handle_help(message: types.Message):
    await bot.send_message(message.chat.id,
                           "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–≤–æ–¥—É —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º\n https://t.me/Garnlzerx")


@dp.message_handler(lambda message: message.text == "üë®–ü—Ä–æ—Ñ–∏–ª—å")
async def profil_user(message: types.Message):
    user_id = message.from_user.id
    user_data = database.get_user_data(user_id)

    if user_data:
        full_name = user_data[0].split(' ')
        first_name = full_name[1]
        last_name = full_name[0]
        surname = full_name[2]
        await bot.send_message(
            message.from_user.id,
            text = (f"üôç <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
                    f"üÜî <i>ID:</i> {user_id}\n"
                    f"üë§ <i>–ù–∏–∫–Ω–µ–π–º:</i> {message.from_user.username}\n\n"
                    f"üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
                    f"‚îå <i>–§–∞–º–∏–ª–∏—è:</i> {last_name}\n"
                    f"‚îú <i>–ò–º—è:</i> {first_name}\n"
                    f"‚îî <i>–û—Ç—á–µ—Å—Ç–≤–æ:</i> {surname}\n\n"
                    f"üè† <b>–ê–¥—Ä–µ—Å:</b>\n"
                    f"‚îå <i>–û–±–ª–∞—Å—Ç—å:</i> {user_data[2]}\n"
                    f"‚îú <i>–ì–æ—Ä–æ–¥:</i> {user_data[1]}\n"
                    f"‚îú <i>–£–ª–∏—Ü–∞:</i> {user_data[3]}\n"
                    f"‚îú <i>–î–æ–º:</i> {user_data[4]}\n"
                    f"‚îî <i>–ò–Ω–¥–µ–∫—Å:</i> {user_data[5]}\n"),

            reply_markup = Inline_keyboard.profil_data_1,  # –ü–µ—Ä–µ–¥–∞–ª –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            parse_mode = 'HTML')




    else:
        await bot.send_message(user_id,
                               f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.username} üëã\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å.",
                               reply_markup = Inline_keyboard.not_profil_data)


@dp.callback_query_handler(lambda c: c.data == 'create_data_profil')
async def callback_handler(callback_query: types.CallbackQuery):
    await profil_register.process_callback(bot, callback_query, State)


@dp.callback_query_handler(lambda c: c.data == 'show_basket_1')
async def callback_handler(callback_query: types.CallbackQuery):
    await corsina.show_cart(bot, callback_query)


@dp.message_handler(state = profil_register.ProfilState.GET_NAME)
async def start_profile(message: types.Message, state: FSMContext):
    async with state.proxy() as profil_data:
        profil_data["name"] = message.text
        await profil_register.get_name(bot, message, state)
        await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


@dp.message_handler(state = profil_register.ProfilState.GET_REGION)
async def start_profile(message: types.Message, state: FSMContext):
    async with state.proxy() as profil_data:
        profil_data["region"] = message.text
        await profil_register.get_region(bot, message, state)
        await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


@dp.message_handler(state = profil_register.ProfilState.GET_CITY)
async def start_profile(message: types.Message, state: FSMContext):
    async with state.proxy() as profil_data:
        profil_data["city"] = message.text
        await profil_register.get_city(bot, message, state)
        await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


@dp.message_handler(state = profil_register.ProfilState.GET_STREET)
async def start_profile(message: types.Message, state: FSMContext):
    async with state.proxy() as profil_data:
        profil_data["street"] = message.text
        await profil_register.get_street(bot, message, state)
        await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


@dp.message_handler(state = profil_register.ProfilState.GET_HOUSE)
async def start_profile(message: types.Message, state: FSMContext):
    async with state.proxy() as profil_data:
        profil_data["house"] = message.text
        await profil_register.get_house_numb(bot, message, state)
        await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


@dp.message_handler(state = profil_register.ProfilState.GET_INDECS)
async def start_profile(message: types.Message, state: FSMContext):
    async with state.proxy() as profil_data:
        profil_data["indecs"] = message.text
        await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)
        await profil_register.get_indecs(bot, message, state)
        await bot.send_message(message.from_user.id,
                               f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
                               f"–ò–º—è: {profil_data['name']}\n"
                               f"–û–±–ª–∞—Å—Ç—å: {profil_data['region']}\n"
                               f"–ì–æ—Ä–æ–¥: {profil_data['city']}\n"
                               f"–£–ª–∏—Ü–∞: {profil_data['street']}\n"
                               f"–î–æ–º: {profil_data['house']}\n"
                               f"–ò–Ω–¥–µ–∫—Å: {profil_data['indecs']}",
                               reply_markup = Inline_keyboard.user_data_1)


@dp.callback_query_handler(lambda c: c.data == 'change_data_1', state = '*')
async def change_data(callback_query: types.CallbackQuery):
    database.delete_user(callback_query.from_user.id)
    await profil_register.process_callback(bot, callback_query, State)


@dp.callback_query_handler(lambda c: c.data == 'return_profile')
async def return_on_profile(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await handle_catalog_button(bot, callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data == 'data-enter_1', state = profil_register.ProfilState.CONFIRMATION)
async def process_data_enter(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id = callback_query.from_user.id, message_id = callback_query.message.message_id)
    await profil_register.conf(bot, callback_query, state)


@dp.callback_query_handler(lambda c: c.data == 'data-edit_1', state = profil_register.ProfilState.CONFIRMATION)
async def process_data_edit(callback_query: types.CallbackQuery):
    database.delete_user(callback_query.from_user.id)
    await profil_register.process_callback(bot, callback_query, State)



@dp.callback_query_handler(lambda c: c.data == 'create_data')
async def create_info_user(message: types.Message):
    await PaymentState.ASK_NAME.set()
    global message_id
    message_id = (await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û:")).message_id


@dp.message_handler(lambda message: message.text == 'üõç –ö–∞—Ç–∞–ª–æ–≥')
async def handle_catalog_1(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id)
    await handle_catalog_button(bot, message.chat.id)


@dp.callback_query_handler(lambda c: c.data == 'back_return')
async def back_return(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await handle_catalog_button(bot, callback_query.message.chat.id)


@dp.message_handler(lambda message: message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def handle_corsina(message: types.Message):
    await corsina.show_cart(bot, message)

@dp.callback_query_handler(lambda c: c.data in ['clear_cart', "pay_cont", "edit_cart", "show_basket"], state = '*')
async def callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await corsina.process_callback(bot, callback_query, state)


@dp.callback_query_handler(lambda c: c.data == 'payment')
async def start_payment_process(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data = database.get_user_data(user_id)
    if user_data:
        await bot.send_message(
            callback_query.from_user.id,
            text = f"*–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:*\n\n*–ò–º—è:*\n{user_data[0]}\n\n*–ê–¥—Ä–µ—Å:*\n{user_data[2]} –æ–±–ª., –≥.{user_data[1]}, —É–ª.{user_data[3]},{user_data[4]}\n–ò–Ω–¥–µ–∫—Å: {user_data[5]}",
            reply_markup = Inline_keyboard.confirmation_keyboard,
            parse_mode = 'Markdown'
        )

    else:
        await PaymentState.ASK_NAME.set()
        global message_id
        message_id = (await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û: ")).message_id


@dp.callback_query_handler(lambda c: c.data == 'change_data', state = '*')
async def change_data(callback_query: types.CallbackQuery, state: FSMContext):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ change_data –≤—ã–∑–≤–∞–Ω")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try:
        database.delete_user(callback_query.from_user.id)
        await PaymentState.ASK_NAME.set()
        global message_id
        message_id = (await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û: ")).message_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


@dp.callback_query_handler(lambda c: c.data == 'confirm_data', state = '*')
async def confirm_data(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()

    user_id = callback_query.from_user.id
    conn = sqlite3.connect('data/bot_database.db')
    cursor = conn.cursor()

    query = "SELECT item_name, articul, selected_variant, quantity, price FROM cart_items WHERE user_id = ?"
    cursor.execute(query, (user_id,))
    cart_items = cursor.fetchall()
    conn.close()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_price = 0
    for item in cart_items:
        total_price += int(item[3] * item[4])  # –ì–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—ã—Ç—å —É–±—Ä–∞—Ç—å -800
    total_price = total_price
    print(f"total price {int(total_price)}")
    await bot.send_invoice(callback_query.from_user.id,
                           title = "–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã",
                           description = "–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã",
                           provider_token = config.PAYMENT_TOKEN,
                           currency = 'rub',
                           prices = [
                               types.LabeledPrice(
                                   label = "–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã",
                                   amount = int(total_price * 100)
                               ),
                               types.LabeledPrice(
                                   label = "–î–æ—Å—Ç–∞–≤–∫–∞",
                                   amount = 30000
                               )
                           ],
                           max_tip_amount = 50000,
                           suggested_tip_amounts = [10000, 15000, 20000, 30000],
                           start_parameter = 'pay',
                           payload = 'test-invoice-payload')


@dp.message_handler(state = corsina.CartEditState.awaiting_item_number)
async def edit_cart(message: types.Message, state: FSMContext):
    async with state.proxy() as data_ed:
        data_ed["item_number"] = message.text
        await corsina.item_number_received(bot, message, state)


@dp.message_handler(state = PaymentState.ASK_NAME)
async def process_name(message: types.Message, state: FSMContext):
    global message_id
    async with state.proxy() as data:
        data['name'] = message.text
    await PaymentState.next()
    await bot.edit_message_text(chat_id = message.from_user.id, message_id = message_id, text = "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:")
    await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


@dp.message_handler(state = PaymentState.ASK_REGION)
async def process_city(message: types.Message, state: FSMContext):
    global message_id
    async with state.proxy() as data:
        data['region'] = message.text
    await PaymentState.next()
    await bot.edit_message_text(chat_id = message.from_user.id, message_id = message_id,
                                text = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∂–∏–≤–µ—Ç–µ:")
    await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


@dp.message_handler(state = PaymentState.ASK_CITY)
async def process_city(message: types.Message, state: FSMContext):
    global message_id
    async with state.proxy() as data:
        data['city'] = message.text
    await PaymentState.next()
    await bot.edit_message_text(chat_id = message.from_user.id, message_id = message_id,
                                text = "–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —É–ª–∏—Ü—ã:")
    await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ASK_STREET
@dp.message_handler(state = PaymentState.ASK_STREET)
async def process_street(message: types.Message, state: FSMContext):
    global message_id
    async with state.proxy() as data:
        data['street'] = message.text
    await PaymentState.next()
    await bot.edit_message_text(chat_id = message.from_user.id, message_id = message_id,
                                text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –¥–æ–º–∞:")
    await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


@dp.message_handler(state = PaymentState.ASK_HOUSE)
async def process_street(message: types.Message, state: FSMContext):
    global message_id
    async with state.proxy() as data:
        data['house'] = message.text
    await PaymentState.next()
    await bot.edit_message_text(chat_id = message.from_user.id, message_id = message_id,
                                text = "–ò –Ω–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å")
    await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


@dp.message_handler(state = PaymentState.ASK_INDECS)
async def process_house(message: types.Message, state: FSMContext):
    global message_id
    async with state.proxy() as data:
        data['indecs'] = message.text
    await PaymentState.next()
    await bot.edit_message_text(chat_id = message.from_user.id, message_id = message_id,
                                text = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
                                       f"\n\n–ò–º—è: {data['name']}\n–û–±–ª–∞—Å—Ç—å: {data['region']}\n–ì–æ—Ä–æ–¥: {data['city']}\n–£–ª–∏—Ü–∞: {data['street']}\n–î–æ–º: {data['house']}\n–ò–Ω–¥–µ–∫—Å: {data['indecs']}",
                                reply_markup = Inline_keyboard.user_data)
    await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


@dp.callback_query_handler(lambda c: c.data == 'data-enter', state = PaymentState.CONFIRMATION)
async def process_data_enter(callback_query: types.CallbackQuery, state: FSMContext):
    global message_id
    user_id = callback_query.from_user.id
    async with state.proxy() as data:
        database.add_user(
            user_id = user_id,
            name = data['name'],
            city = data['city'],
            region = data['region'],
            street = data['street'],
            number_house = data['house'],
            indecs = data['indecs']
        )

    await bot.edit_message_text(chat_id = callback_query.message.chat.id, message_id = message_id,
                                text = "–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã: ")
    await bot.delete_message(chat_id = callback_query.message.chat.id, message_id = callback_query.message.message_id)

    await state.finish()

    conn = sqlite3.connect('data/bot_database.db')
    cursor = conn.cursor()

    query = "SELECT item_name, articul, selected_variant, quantity, price FROM cart_items WHERE user_id = ?"
    cursor.execute(query, (user_id,))
    cart_items = cursor.fetchall()
    conn.close()

    total_price = 0
    for item in cart_items:
        total_price += int(item[3] * item[4])

    print(f"total price {int(total_price)}")
    await bot.send_invoice(callback_query.from_user.id,
                           title = "–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã",
                           description = "–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã",
                           provider_token = config.PAYMENT_TOKEN,
                           currency = 'rub',
                           prices = [
                               types.LabeledPrice(
                                   label = "–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã",
                                   amount = int(total_price * 100)
                               ),
                               types.LabeledPrice(
                                   label = "–î–æ—Å—Ç–∞–≤–∫–∞",
                                   amount = 30000
                               )
                           ],
                           max_tip_amount = 50000,
                           suggested_tip_amounts = [10000, 20000, 30000, 40000],
                           start_parameter = 'pay',
                           payload = 'test-invoice-payload')


@dp.callback_query_handler(lambda c: c.data == 'data-edit',state = PaymentState.CONFIRMATION)
async def process_data_edit(callback_query: types.CallbackQuery, state: FSMContext):
    await PaymentState.ASK_NAME.set()
    message_id = (await bot.edit_message_text(chat_id = callback_query.message.chat.id,
                                              message_id = callback_query.message.message_id,
                                              text = "–û–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û: ")).message_id


@dp.callback_query_handler(lambda c: c.data in ['back', 'forward', 'choose_enter_categorical', 'more'])
async def callback_handler_2(callback_query: types.CallbackQuery):
    await photo_handler.process_callback(bot, callback_query)


@dp.callback_query_handler(lambda c: c.data in ['back_1', 'forward_1', 'back_return_1'])
async def callback_handler_2(callback_query: types.CallbackQuery):
    await more_category.process_callback(bot, callback_query)


@dp.callback_query_handler(lambda c: c.data in ['more_back_return'])
async def callback_handler_3(callback_query: types.CallbackQuery):
    await more_category.process_callback(bot, callback_query)


@dp.callback_query_handler(lambda c: c.data in ['back-enter', 'forward-enter', 'choose_enter', 'amount_sum', 'amount_min', 'back_to_choose'])
async def callback_handler_4(callback_query: types.CallbackQuery):
    await photo_hendler_two.process_callback(bot, callback_query)


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    try:
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok = True)
    except Exception as e:
        print(f"Pay error: {e}")


@dp.message_handler(content_types = ContentTypes.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    user_id = message.from_user.id
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")


    user_data = database.get_user_data(user_id)
    if user_data:
        user_info = f"*–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n–ò–º—è: {user_data[0]}\n–û–±–ª–∞—Å—Ç—å: {user_data[2]}\n–ì–æ—Ä–æ–¥: {user_data[1]}\n–£–ª–∏—Ü–∞: {user_data[3]}\n–î–æ–º: {user_data[4]}\n–ò–Ω–¥–µ–∫—Å: {user_data[5]}"
    else:
        user_info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
    conn = sqlite3.connect('data/bot_database.db')
    cursor = conn.cursor()
    cursor.execute(
        "SELECT item_name, articul, selected_variant, quantity, price, selected_category FROM cart_items WHERE user_id = ?", (user_id,))
    orders = cursor.fetchall()
    conn.close()

    if user_id == 1066300592:

        order_info = "*–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n"
        for item in orders:
            print(item)
            amount_price_1 = item[3] * item[4]
            selected_category = item[5]
            order_info += f"*–¢–æ–≤–∞—Ä:* {item[0]}\n–ê—Ä—Ç–∏–∫—É–ª: {item[1]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}\n–í–∞—Ä–∏–∞–Ω—Ç: {item[2]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item[3]}\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {amount_price_1}\n\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, f"{user_info}\n\n{order_info}", parse_mode = 'Markdown')
    else:
        order_info = "*–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ*\n"
        for item in orders:
            print(item)
            amount_price_1 = item[3] * item[4]
            selected_category = item[5]
            order_info += f"`–ó–∞–∫–∞–∑`\n\n*–¢–æ–≤–∞—Ä:* {item[0]}\n–ê—Ä—Ç–∏–∫—É–ª: {item[1]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}\n–í–∞—Ä–∏–∞–Ω—Ç: {item[2]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item[3]}\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {amount_price_1}\n\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, f"{order_info}", parse_mode = 'Markdown')

    # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await corsina.clear_user_cart(user_id)


@dp.callback_query_handler(lambda c: c.data.startswith('category'))
async def handle_category_choice(callback_query: types.CallbackQuery):
    category = callback_query.data.split('_')[1]
    await show_category_products(bot, callback_query.message.chat.id, category)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates = True)
