import sqlite3
from data.db import database
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import config
import corsina
from catalog import handle_catalog_button, show_category_products  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
import photo_handler
import photo_hendler_two
from aiogram.types import ContentTypes,InlineKeyboardButton,InlineKeyboardMarkup
from keyboards.Markup import Markup_keyboards
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from keyboards.Inline import Inline_keyboard


class PaymentState(StatesGroup):
    ASK_NAME = State()
    ASK_REGION = State()
    ASK_CITY = State()
    ASK_STREET = State()
    ASK_HOUSE = State()
    CONFIRMATION = State()

storage = MemoryStorage()
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot, storage = storage)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    welcome_message = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–£ –º–µ–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã!\n–ö–æ–Ω—Ç–∞–∫—Ç –º–æ–µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: https://t.me/Garnlzerx'
    await bot.send_message(message.chat.id, welcome_message, reply_markup=Markup_keyboards.main_menu)

@dp.message_handler(lambda message: message.text in ['üÜò –ü–æ–º–æ—â—å', '/help'])
async def handle_help(message: types.Message):
    await bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –ü–æ–º–æ—â—å")


@dp.message_handler(lambda message: message.text == "üë®–ü—Ä–æ—Ñ–∏–ª—å")
async def profil_user(message: types.Message):
    user_id = message.from_user.id
    user_data = database.get_user_data(user_id)
    if user_data:
        await bot.send_message(
            message.from_user.id,
            text = f"*–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:*\n\n*–ò–º—è:*\n{user_data[0]}\n\n*–ê–¥—Ä–µ—Å:*\n{user_data[2]} –æ–±–ª, –≥.{user_data[1]}, —É–ª.{user_data[3]},{user_data[4]}",
            reply_markup = Inline_keyboard.profil_data,
            parse_mode = 'Markdown'
        )
    else:
        await bot.send_message(user_id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.username} üëã, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –±–æ—Ç–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞")
        await PaymentState.ASK_NAME.set()
        global message_id
        message_id = (await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û:")).message_id


@dp.message_handler(lambda message: message.text == 'üõç –ö–∞—Ç–∞–ª–æ–≥')
async def handle_catalog(message: types.Message):
    await handle_catalog_button(bot, message.chat.id)


@dp.message_handler(lambda message: message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def handle_corsina(message: types.Message):
    await corsina.show_cart(bot, message)

@dp.callback_query_handler(lambda c: c.data in ['clear_cart', "pay_cont"])
async def callback_handler(callback_query: types.CallbackQuery):
    await corsina.process_callback(bot, callback_query)

@dp.callback_query_handler(lambda c: c.data == 'payment')
async def start_payment_process(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_data = database.get_user_data(user_id)
    if user_data:
        await bot.send_message(
            callback_query.from_user.id,
            text = f"*–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:*\n\n*–ò–º—è:*\n{user_data[0]}\n\n*–ê–¥—Ä–µ—Å:*\n{user_data[2]} –æ–±–ª., –≥.{user_data[1]}, —É–ª.{user_data[3]},{user_data[4]}",
            reply_markup = Inline_keyboard.confirmation_keyboard
        )

    else:
        await PaymentState.ASK_NAME.set()
        global message_id
        message_id = (await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û: ")).message_id

@dp.callback_query_handler(lambda c: c.data == 'change_data', state='*')
async def change_data(callback_query: types.CallbackQuery, state: FSMContext):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ change_data –≤—ã–∑–≤–∞–Ω")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try:
        database.delete_user(callback_query.from_user.id)
        await PaymentState.ASK_NAME.set()
        global message_id
        message_id = (await bot.send_message(callback_query.from_user.id,"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û: ")).message_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

@dp.callback_query_handler(lambda c: c.data == 'confirm_data', state='*')
async def confirm_data(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()

    user_id = callback_query.from_user.id
    conn = sqlite3.connect('data/bot_database.db')
    cursor = conn.cursor()

    query = "SELECT item_name, articul, selected_variant, quantity, price FROM cart_items WHERE user_id = ?"
    cursor.execute(query,(user_id,))
    cart_items = cursor.fetchall()
    conn.close()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_price = 0
    for item in cart_items:
        total_price += int(item[3] * item[4] - 800) # –ì–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—ã—Ç—å —É–±—Ä–∞—Ç—å -800
    total_price = total_price
    print(f"total price {int(total_price)}")
    await bot.send_invoice(callback_query.from_user.id,
                           title = "–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã",
                           description = "–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã",
                           provider_token = config.PAYMENT_TOKEN,
                           currency = 'rub',
                           prices = [types.LabeledPrice(label = "–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã",amount = int(total_price*100))],
                           start_parameter = 'pay',
                           payload = 'test-invoice-payload')



@dp.message_handler(state=PaymentState.ASK_NAME)
async def process_name(message: types.Message, state: FSMContext):
    global message_id
    async with state.proxy() as data:
        data['name'] = message.text
    await PaymentState.next()
    await bot.edit_message_text(chat_id = message.from_user.id, message_id = message_id, text = "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:")
    await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)

@dp.message_handler(state=PaymentState.ASK_REGION)
async def process_city(message: types.Message, state: FSMContext):
    global message_id
    async with state.proxy() as data:
        data['region'] = message.text
    await PaymentState.next()
    await bot.edit_message_text(chat_id = message.from_user.id, message_id = message_id, text = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∂–∏–≤–µ—Ç–µ:")
    await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)

@dp.message_handler(state=PaymentState.ASK_CITY)
async def process_city(message: types.Message, state: FSMContext):
    global message_id
    async with state.proxy() as data:
        data['city'] = message.text
    await PaymentState.next()
    await bot.edit_message_text(chat_id = message.from_user.id, message_id = message_id, text = "–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —É–ª–∏—Ü—ã:")
    await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ASK_STREET
@dp.message_handler(state=PaymentState.ASK_STREET)
async def process_street(message: types.Message, state: FSMContext):
    global message_id
    async with state.proxy() as data:
        data['street'] = message.text
    await PaymentState.next()
    await bot.edit_message_text(chat_id = message.from_user.id, message_id = message_id, text = "–ò –Ω–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –¥–æ–º–∞:")
    await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ASK_HOUSE
@dp.message_handler(state=PaymentState.ASK_HOUSE)
async def process_house(message: types.Message, state: FSMContext):
    global message_id
    async with state.proxy() as data:
        data['house'] = message.text
    await PaymentState.next()
    await bot.edit_message_text(chat_id = message.from_user.id, message_id = message_id, text = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
                                                                                                f"\n\n–ò–º—è: {data['name']}\n–û–±–ª–∞—Å—Ç—å: {data['region']}\n–ì–æ—Ä–æ–¥: {data['city']}\n–£–ª–∏—Ü–∞: {data['street']}\n–î–æ–º: {data['house']}",
                                                                                                reply_markup = Inline_keyboard.user_data)
    await bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id)

@dp.callback_query_handler(lambda c: c.data == 'data-enter', state=PaymentState.CONFIRMATION)
async def process_data_enter(callback_query: types.CallbackQuery, state: FSMContext):
    global message_id

    async with state.proxy() as data:
        database.add_user(
            user_id = callback_query.from_user.id,
            name = data['name'],
            city = data['city'],
            region = data['region'],
            street = data['street'],
            number_house = data['house']
        )


    await bot.edit_message_text(chat_id = callback_query.message.chat.id,message_id = message_id,
                                text = "–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã: ")
    await bot.delete_message(chat_id = callback_query.message.chat.id,message_id = callback_query.message.message_id)

    await state.finish()

    user_id = callback_query.from_user.id
    conn = sqlite3.connect('data/bot_database.db')
    cursor = conn.cursor()

    query = "SELECT item_name, articul, selected_variant, quantity, price FROM cart_items WHERE user_id = ?"
    cursor.execute(query,(user_id,))
    cart_items = cursor.fetchall()
    conn.close()

    total_price = 0
    for item in cart_items:
        total_price += int(item[3] * item[4] - 800)  # –ì–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—ã—Ç—å —É–±—Ä–∞—Ç—å -800
    total_price = total_price
    print(f"total price {int(total_price)}")
    await bot.send_invoice(callback_query.from_user.id,
                           title = "–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã",
                           description = "–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã",
                           provider_token = config.PAYMENT_TOKEN,
                           currency = 'rub',
                           prices = [types.LabeledPrice(label = "–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã",amount = int(total_price * 100))],
                           start_parameter = 'pay',
                           payload = 'test-invoice-payload')

@dp.callback_query_handler(lambda c: c.data == 'data-edit', state=PaymentState.CONFIRMATION)
async def process_data_edit(callback_query: types.CallbackQuery, state: FSMContext):
    await PaymentState.ASK_NAME.set()
    message_id = (await bot.edit_message_text(chat_id = callback_query.message.chat.id, message_id = callback_query.message.message_id, text = "–û–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û: ")).message_id


@dp.callback_query_handler(lambda c: c.data in ['back', 'forward', 'choose_enter_categorical', 'back_return'])
async def callback_handler(callback_query: types.CallbackQuery):
    await photo_handler.process_callback(bot, callback_query)

@dp.callback_query_handler(lambda c: c.data in ['back-enter', 'forward-enter', 'choose_enter', 'amount_sum', 'amount_min'])
async def callback_handler(callback_query: types.CallbackQuery):
    await photo_hendler_two.process_callback(bot, callback_query)

@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    try:
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok = True)
    except Exception as e:
        print(f"Pay erorr: {e}")


@dp.message_handler(content_types = ContentTypes.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    user_id = message.from_user.id
    payment_info = message.successful_payment.to_python()
    for k,v in payment_info.items():
        print(f"{k} = {v}")

    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = database.get_user_data(user_id)
    if user_data:
        user_info = f"*–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n–ò–º—è: {user_data[0]}\n–û–±–ª–∞—Å—Ç—å: {user_data[2]}\n–ì–æ—Ä–æ–¥: {user_data[1]}\n–£–ª–∏—Ü–∞: {user_data[3]}\n–î–æ–º: {user_data[4]}"
    else:
        user_info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
    conn = sqlite3.connect('data/bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT item_name, articul, selected_variant, quantity, price FROM cart_items WHERE user_id = ?",(user_id,))
    orders = cursor.fetchall()
    conn.close()

    order_info = "*–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n"
    for item in orders:
        amount_price_1 = item[3] * item[4]
        order_info += f"*–¢–æ–≤–∞—Ä:* {item[0]}\n–ê—Ä—Ç–∏–∫—É–ª: {item[1]}\n–í–∞—Ä–∏–∞–Ω—Ç: {item[2]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item[3]}\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {amount_price_1}\n\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(1066300592,f"{user_info}\n\n{order_info}",parse_mode = 'Markdown')

    # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await corsina.clear_user_cart(user_id)


# @dp.message_handler(lambda message: message.text)
# async def process_user_input(message: types.Message):
#     user_input = message.text
#     for key in user:
#         if user[key] == '':
#             user[key] = user_input
#             break
#
#     await message.answer(f"–í—ã –≤–≤–µ–ª–∏: {user_input}")


@dp.callback_query_handler(lambda c: c.data.startswith('category'))
async def handle_category_choice(callback_query: types.CallbackQuery):
    category = callback_query.data.split('_')[1]
    await show_category_products(bot, callback_query.message.chat.id, category)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)